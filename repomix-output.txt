This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-30T04:19:41.776Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  db/
    init.sql
  src/
    index.ts
  .dockerignore
  .env
  .env.example
  .gitignore
  Dockerfile
  nodemon.json
  package.json
  tsconfig.json
cli/
  weaver.sh
frontend/
  public/
    index.html
    manifest.json
    robots.txt
  src/
    components/
      ConnectionStatus.tsx
      CopyButton.tsx
      EmptyState.tsx
      ErrorMessage.tsx
      Footer.tsx
      Header.tsx
      LoadingScreen.tsx
      Message.tsx
      MessageContent.tsx
      MessageHeader.tsx
      MessageList.tsx
      SearchBar.tsx
      SortButton.tsx
    types/
      types.ts
    utils/
      formatters.tsx
    App.css
    App.test.tsx
    App.tsx
    index.css
    index.tsx
    react-app-env.d.ts
    reportWebVitals.ts
    setupTests.ts
  .dockerignore
  .env
  .gitignore
  Dockerfile
  nodemon.json
  package.json
  postcss.config.js
  tailwind.config.js
  tsconfig.json
docker-compose.yml
install.sh
LICENSE
Makefile
README.md

================================================================
Repository Files
================================================================

================
File: backend/db/init.sql
================
CREATE TABLE IF NOT EXISTS text_data (

    id SERIAL PRIMARY KEY,

    content TEXT NOT NULL,

    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP

);

================
File: backend/src/index.ts
================
import express from "express";
import { Pool } from "pg";
import cors from "cors";
import { Server } from "socket.io";
import { createServer } from "http";

const app = express();
const httpServer = createServer(app);
const io = new Server(httpServer, {
  cors: {
    origin: "http://localhost:3010",
    methods: ["GET", "POST"],
  },
});

console.log(
  process.env.DB_HOST,
  process.env.DB_PORT,
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD
);

// Database connection
const pool = new Pool({
  host: process.env.DB_HOST,
  port: parseInt(process.env.DB_PORT || "5432"),
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: String(process.env.DB_PASSWORD), // Explicit string conversion})
});

app.use(cors());
app.use(express.json({ limit: "50mb" }));

// Health check endpoint
app.get("/health", (req, res) => {
  res.json({ status: "ok" });
});

// Post endpoint to receive text data
app.post("/api/text", async (req, res) => {
  try {
    const { content } = req.body;

    // Insert into database
    const result = await pool.query(
      "INSERT INTO text_data (content) VALUES ($1) RETURNING *",
      [content]
    );

    const savedData = result.rows[0];

    // Emit to all connected clients
    io.emit("newText", savedData);

    res.status(201).json(savedData);
  } catch (error) {
    console.error("Error saving text:", error);
    res.status(500).json({ error: "Failed to save text data" });
  }
});

// Get all texts endpoint
app.get("/api/texts", async (req, res) => {
  try {
    const result = await pool.query(
      "SELECT * FROM text_data ORDER BY created_at DESC"
    );
    res.json(result.rows);
  } catch (error) {
    console.error("Error fetching texts:", error);
    res.status(500).json({ error: "Failed to fetch text data" });
  }
});

const PORT = process.env.PORT || 4000;
httpServer.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

================
File: backend/.dockerignore
================
node_modules
dist
.git
.gitignore
README.md
.env
*.log

================
File: backend/.env
================
DB_HOST=localhost
DB_PORT=5432
DB_NAME=weaver
DB_USER=postgres
DB_PASSWORD=postgres

================
File: backend/.env.example
================
DB_HOST=localhost
DB_PORT=5432
DB_NAME=weaver
DB_USER=postgres
DB_PASSWORD=postgres

================
File: backend/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: backend/Dockerfile
================
FROM node:18-alpine as development

WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .

EXPOSE 4000
CMD ["npm", "run", "dev"]

FROM node:18-alpine as production
WORKDIR /app
COPY package*.json ./
RUN npm install --production
COPY . .
RUN npm run build
EXPOSE 4000
CMD ["npm", "start"]

================
File: backend/nodemon.json
================
{
  "watch": ["src/"],
  "ext": ".ts,.js,.tsx,.jsx",
  "ignore": ["node_modules"],
  "exec": "ts-node ./src/index.ts"
}

================
File: backend/package.json
================
{
  "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "nodemon --exec ts-node src/index.ts",
    "build": "tsc",
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "ts-node-dev --respawn src/index.ts"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "express-validator": "^7.2.0",
    "helmet": "^8.0.0",
    "pg": "^8.13.1",
    "socket.io": "^4.8.1"
  },
  "devDependencies": {
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.0",
    "@types/node": "^22.9.0",
    "@types/pg": "^8.11.10",
    "@typescript-eslint/eslint-plugin": "^8.13.0",
    "@typescript-eslint/parser": "^8.13.0",
    "nodemon": "^3.1.7",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.6.3"
  }
}

================
File: backend/tsconfig.json
================
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs" /* Specify what module code is generated. */,
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  }
}

================
File: cli/weaver.sh
================
#!/bin/bash

# Default values
output_file="collected_code.txt"
search_dir="."
extensions=("\.py" ".sh" ".yml" "\.yaml" "\.js" "\.jsx" "\.java" "\.cpp" "\.c" "\.h" "\.hpp" "\.cs" "\.html" "\.css" "\.tsx" "\.ts" "\.go" "\.rb" "\.php" "\.scala" "\.rs" "\.swift" "")
exclude_patterns=()
default_excludes=(
    ".git" ".svn" ".hg" "package-lock.json"
    "node_modules" "vendor" "build" "dist" "target"
    "__pycache__" "*.pyc" "venv" ".env" ".venv" 
    "*_test.go" "*.test.js" "*_spec.rb" "*Test.java" "*_test.py"
    ".idea" ".vscode" ".vs" "*.swp" "*.swo"
    "*.log" "*.lock" "*.tmp"
    "docs" "*.md" "*.txt" "*.ico" "*.png" "*.jpg" "*.jpeg" "*.gif" "*.svg" "*.bmp" "*.mp4" "*.mov" "*.avi" "*.mkv" "*.mp3" "*.wav" "*.ogg" "*.flac" "*.m4a" "*.webm" "*.wma" 
)

# ANSI color codes in variables for better maintainability
declare -A COLORS=(
    ["header"]=$'\033[1;36m'      # Cyan, bold
    ["section"]=$'\033[1;35m'     # Magenta, bold
    ["option"]=$'\033[0;32m'      # Green
    ["emphasis"]=$'\033[1m'       # Bold
    ["warning"]=$'\033[1;33m'     # Yellow, bold
    ["reset"]=$'\033[0m'          # Reset
)

# Function to wrap text at a specified width while preserving indentation
wrap_text() {
    local text="$1"
    local indent="$2"
    echo "$text" | fold -s -w 80 | sed "2,\$s/^/${indent}/"
}

show_help() {
    local script_name=$(basename "$0")
    local C="${COLORS[@]}"  # Short reference to colors
    
    # Common file extensions as an array for better maintenance
    local default_extensions=(
        py sh yml yaml js jsx java cpp c h hpp cs
        html css tsx ts go rb php scala rs swift
    )
    
    # Default exclusions as an array for better maintenance
    local default_exclusions=(
        ".git/" ".svn/" ".hg/"
        "node_modules/" "vendor/" "build/" "dist/" "target/"
        "__pycache__/" "*.pyc" "venv/" ".env" ".venv/"
        "*_test.go" "*.test.js" "*_spec.rb" "*Test.java" "*_test.py"
        ".idea/" ".vscode/" ".vs/" "*.swp" "*.swo"
        "*.log" "*.lock" "*.tmp"
        "docs/" "*.md" "*.txt" "images/" "audio/" "video/"
    )

    cat <<EOF
${COLORS[header]}Code Collection and Transmission Script${COLORS[reset]}

${COLORS[section]}DESCRIPTION${COLORS[reset]}
    $(wrap_text "Recursively collects code files from a directory and transmits them to a specified endpoint. Supports multiple file extensions, exclusion patterns, and includes metadata about the collection." "    ")

${COLORS[section]}USAGE${COLORS[reset]}
    $script_name [OPTIONS]

${COLORS[section]}OPTIONS${COLORS[reset]}
    ${COLORS[option]}-d${COLORS[reset]} <directory>    Search directory (default: current directory)
    ${COLORS[option]}-o${COLORS[reset]} <file>         Output filename (default: collected_code.txt)
    ${COLORS[option]}-e${COLORS[reset]} <extensions>   File extensions to include (comma-separated)
                     Default: ${default_extensions[@]}
    ${COLORS[option]}-x${COLORS[reset]} <patterns>     Additional patterns to exclude (comma-separated)
    ${COLORS[option]}-a${COLORS[reset]}               Disable default exclusions
    ${COLORS[option]}-q${COLORS[reset]}               Quiet mode - suppress progress messages
    ${COLORS[option]}-h${COLORS[reset]}               Show this help message

${COLORS[section]}DEFAULT EXCLUSIONS${COLORS[reset]}
    Version Control:  ${default_exclusions[@]:0:3}
    Dependencies:    ${default_exclusions[@]:3:5}
    Cache/Env:       ${default_exclusions[@]:8:5}
    Test Files:      ${default_exclusions[@]:13:5}
    IDE/Editor:      ${default_exclusions[@]:18:5}
    Logs/Temp:       ${default_exclusions[@]:23:3}
    Documentation:   ${default_exclusions[@]:26:6}

${COLORS[section]}OUTPUT FORMAT${COLORS[reset]}
    • Collection metadata (timestamp, source)
    • File inventory (paths, sizes)
    • Statistics (file count, line count)
    • Code contents with language markers

${COLORS[section]}EXAMPLES${COLORS[reset]}
    # Collect Python and JavaScript files
    $script_name -e py,js

    # Search specific directory with custom exclusions
    $script_name -d /path/to/project -x "*.min.js,*.generated.*"

    # Custom output with all files (no default exclusions)
    $script_name -a -o my_collection.txt -d /path/to/code

${COLORS[section]}NOTE${COLORS[reset]}
    ${COLORS[warning]}Files are processed in chunks and sent to http://localhost:4000/api/text${COLORS[reset]}
EOF
}
# Process command line arguments
use_default_excludes=true
quiet_mode=false

while getopts "d:o:e:x:aqh" opt; do
    case $opt in
        d) search_dir="$OPTARG"
           [ ! -d "$search_dir" ] && echo "Error: Directory '$search_dir' does not exist" && exit 1
           ;;
        o) output_file="$OPTARG";;
        e) IFS=',' read -ra extensions <<< "$OPTARG"
           for i in "${!extensions[@]}"; do
               extensions[$i]="\\${extensions[$i]}"
           done
           ;;
        x) IFS=',' read -ra custom_excludes <<< "$OPTARG"
           exclude_patterns+=("${custom_excludes[@]}")
           ;;
        a) use_default_excludes=true;;
        q) quiet_mode=true;;
        h) show_help; exit 0;;
        ?) show_help; exit 1;;
    esac
done

# Add default excludes if not disabled
if [ "$use_default_excludes" = true ]; then
    exclude_patterns+=("${default_excludes[@]}")
fi

# Build find command
find_cmd="find \"$search_dir\""
for pattern in "${exclude_patterns[@]}"; do
    if [[ $pattern == *"*"* ]]; then
        find_cmd+=" -name \"$pattern\" -prune -o"
    else
        find_cmd+=" -name \"$pattern\" -prune -o"
        find_cmd+=" -path \"*/$pattern\" -prune -o"
        find_cmd+=" -path \"*/$pattern/*\" -prune -o"
    fi
done

extension_pattern=$(printf "|%s" "${extensions[@]}")
extension_pattern="(${extension_pattern:1})"
find_cmd+=" -type f -regextype posix-extended -regex \".*${extension_pattern}$\" -print"

# Create temporary directory for processing
temp_dir=$(mktemp -d)
trap 'rm -rf "$temp_dir"' EXIT

# Write metadata section
cat > "$temp_dir/output.txt" << EOF
<METADATA>
collection_date: $(date -u '+%Y-%m-%d')
collection_time: $(date -u '+%H:%M:%S UTC')
source_directory: $(realpath "$search_dir")
excluded_patterns: ${exclude_patterns[*]}
file_extensions: ${extensions[*]}
</METADATA>

<FILE_LIST>
EOF

# Initialize counters
total_files=0
total_lines=0

# First pass - collect file list
while IFS= read -r file; do
    relative_path="${file#$search_dir/}"
    extension="${file##*.}"
    lines=$(wc -l < "$file")
    total_files=$((total_files + 1))
    total_lines=$((total_lines + lines))
    echo "- file_path: $relative_path" >> "$temp_dir/output.txt"
done < <(eval "$find_cmd")

# Write statistics
cat >> "$temp_dir/output.txt" << EOF

</FILE_LIST>

<STATISTICS>
total_files: $total_files
total_lines: $total_lines
</STATISTICS>

<CODE_CONTENTS>
EOF

# Second pass - collect code
while IFS= read -r file; do
    relative_path="${file#$search_dir/}"
    if [ "$quiet_mode" = false ]; then
        echo "Processing: $relative_path"
    fi
    
    {
        echo "--- FILE: $relative_path ---"
        echo "LANGUAGE: ${file##*.}"
        echo "BEGIN_CODE"
        sed 's/\\/\\\\/g; s/"/\\"/g; s/\t/\\t/g; s/\r//g' "$file"
        echo "END_CODE"
        echo
    } >> "$temp_dir/output.txt"
done < <(eval "$find_cmd")

# Close the code contents section
echo "</CODE_CONTENTS>" >> "$temp_dir/output.txt"

# Split the file into chunks for processing
split -b 1M "$temp_dir/output.txt" "$temp_dir/chunk_"

for chunk in "$temp_dir"/chunk_*; do
    if [ "$quiet_mode" = false ]; then
        echo "Sending chunk: $(basename "$chunk")"
    fi
    
    # Create a temporary JSON file
    json_file="$temp_dir/payload.json"
    
    # Create JSON structure directly without using jq
    {
        echo -n '{"content": "'
        sed 's/\\/\\\\/g; s/"/\\"/g; s/$/\\n/g' "$chunk" | tr -d '\n'
        echo '"}'
    } > "$json_file"
    
    # Send the JSON file directly to curl
    curl -X POST http://localhost:4000/api/text \
         -H "Content-Type: application/json" \
         --data @"$json_file"
         
    # Clean up the temporary JSON file
    rm -f "$json_file"
done

if [ "$quiet_mode" = false ]; then
    echo "Collection and transmission complete: $total_files files, $total_lines lines"
fi

================
File: frontend/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/weaver.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Weaver</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: frontend/public/manifest.json
================
{
  "short_name": "Weaver",
  "name": "Weaver",
  "icons": [
    {
      "src": "weaver.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: frontend/public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: frontend/src/components/ConnectionStatus.tsx
================
export const ConnectionStatus = ({
  isConnected,
  darkMode,
}: {
  isConnected: boolean;
  darkMode: boolean;
}) => (
  <div
    className={`flex items-center space-x-2 ${
      darkMode ? "bg-gray-700" : "bg-white"
    } px-4 py-2 rounded-full shadow-sm`}
  >
    <div
      className={`w-2 h-2 rounded-full ${
        isConnected ? "bg-green-400 animate-pulse" : "bg-red-400"
      }`}
    />
    <span
      className={`text-sm ${
        isConnected ? "text-green-400" : "text-red-400"
      } font-medium`}
    >
      {isConnected ? "Connected" : "Disconnected"}
    </span>
  </div>
);

================
File: frontend/src/components/CopyButton.tsx
================
import { useState, useEffect } from "react";
import { Copy, Check } from "lucide-react";

const CopyButton = ({
  text,
  darkMode,
}: {
  text: string;
  darkMode: boolean;
}) => {
  const [copied, setCopied] = useState(false);
  const [showCopied, setShowCopied] = useState(false);

  useEffect(() => {
    let timeout: NodeJS.Timeout;
    if (copied) {
      setShowCopied(true);
      timeout = setTimeout(() => {
        setShowCopied(false);
        // Wait for fade out animation before changing state
        setTimeout(() => {
          setCopied(false);
        }, 200); // Match this with CSS transition duration
      }, 1800); // Show copied state for 1.8s
    }
    return () => clearTimeout(timeout);
  }, [copied]);

  const handleCopy = async (e: React.MouseEvent) => {
    e.stopPropagation();
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
    } catch (err) {
      console.error("Failed to copy text:", err);
    }
  };

  return (
    <div className="relative group">
      <button
        onClick={handleCopy}
        className={`p-2 rounded-lg ${
          darkMode
            ? "text-gray-400 hover:text-indigo-400 hover:bg-gray-700"
            : "text-gray-500 hover:text-indigo-600 hover:bg-indigo-50"
        } transition-all duration-200`}
        aria-label="Copy to clipboard"
      >
        {copied ? (
          <Check className="w-4 h-4 text-green-500" />
        ) : (
          <Copy className="w-4 h-4" />
        )}
      </button>
      <div
        className={`absolute -top-8 left-1/2 transform -translate-x-1/2 
          ${darkMode ? "bg-gray-700" : "bg-gray-900"} 
          text-white px-2 py-1 rounded text-xs whitespace-nowrap 
          transition-opacity duration-200
          ${showCopied ? "opacity-100" : "opacity-0"} 
          ${!copied && "group-hover:opacity-100"}
          pointer-events-none z-50`}
      >
        {copied ? "Copied!" : "Copy to clipboard"}
      </div>
    </div>
  );
};

export default CopyButton;

================
File: frontend/src/components/EmptyState.tsx
================
import { RefreshCw } from "lucide-react";

export const EmptyState = ({
  darkMode,
  searchTerm,
}: {
  darkMode: boolean;
  searchTerm: string;
}) => (
  <div
    className={`${
      darkMode
        ? "bg-gray-800/90 border-gray-700"
        : "bg-white/80 border-indigo-100"
    } backdrop-blur-sm p-12 rounded-xl border text-center shadow-sm`}
  >
    <RefreshCw
      className={`w-12 h-12 ${
        darkMode ? "text-indigo-400" : "text-indigo-400"
      } mx-auto mb-4`}
    />
    <p
      className={`${
        darkMode ? "text-gray-200" : "text-indigo-900"
      } font-medium text-lg`}
    >
      {searchTerm ? "No matching messages found" : "No messages available"}
    </p>
    <p
      className={`${
        darkMode ? "text-indigo-400/70" : "text-indigo-600/70"
      } mt-2`}
    >
      {searchTerm
        ? "Try adjusting your search terms"
        : "New messages will appear here in real-time"}
    </p>
  </div>
);

================
File: frontend/src/components/ErrorMessage.tsx
================
import { AlertCircle } from "lucide-react";

export const ErrorMessage = ({
  error,
  darkMode,
}: {
  error: string;
  darkMode: boolean;
}) => (
  <div
    className={`mb-6 ${
      darkMode ? "bg-red-900/50" : "bg-red-50"
    } backdrop-blur-sm border ${
      darkMode ? "border-red-800" : "border-red-200"
    } rounded-xl p-4 flex items-start space-x-3 animate-fade-in`}
  >
    <AlertCircle className="w-5 h-5 text-red-500 mt-0.5 flex-shrink-0" />
    <div>
      <h3
        className={`text-sm font-medium ${
          darkMode ? "text-red-400" : "text-red-800"
        }`}
      >
        Error
      </h3>
      <p
        className={`text-sm ${darkMode ? "text-red-300" : "text-red-700"} mt-1`}
      >
        {error}
      </p>
    </div>
  </div>
);

================
File: frontend/src/components/Footer.tsx
================
import { Heart } from "lucide-react";

export const Footer = ({ darkMode }: { darkMode: boolean }) => (
  <footer
    className={`${
      darkMode
        ? "bg-gray-800/90 border-t border-gray-700"
        : "bg-white/80 border-t border-indigo-100"
    } backdrop-blur-sm py-4 mt-8 fixed bottom-0 w-full`}
  >
    <div className="max-w-6xl mx-auto px-4 flex items-center justify-between">
      <div className="flex items-center space-x-2">
        <Heart
          className={`w-4 h-4 ${darkMode ? "text-pink-400" : "text-pink-500"}`}
        />
        <span
          className={`text-sm ${darkMode ? "text-gray-400" : "text-gray-600"}`}
        >
          Created by Spencer Jireh Cebrian
        </span>
      </div>
      <div
        className={`text-sm ${darkMode ? "text-gray-400" : "text-gray-600"}`}
      >
        {new Date().getFullYear()} © All rights reserved
      </div>
    </div>
  </footer>
);

================
File: frontend/src/components/Header.tsx
================
import { MessageCircle, Moon, Sun } from "lucide-react";
import { useState } from "react";
import { ConnectionStatus } from "./ConnectionStatus";
import { SearchBar } from "./SearchBar";
import { SortButton } from "./SortButton";

export const Header = ({
  darkMode,
  isConnected,
  toggleDarkMode,
  searchTerm,
  handleSearch,
  sortOrder,
  toggleSortOrder,
}: {
  darkMode: boolean;
  isConnected: boolean;
  toggleDarkMode: () => void;
  searchTerm: string;
  handleSearch: (value: string) => void;
  sortOrder: "newest" | "oldest";
  toggleSortOrder: () => void;
}) => {
  const [isSearchFocused, setIsSearchFocused] = useState(false);

  return (
    <header
      className={`${darkMode ? "bg-gray-800/90" : "bg-white/80"} 
      backdrop-blur-sm border-b ${
        darkMode ? "border-gray-700" : "border-indigo-100"
      } 
      sticky top-0 z-10 transition-all duration-300`}
    >
      <div className="max-w-6xl mx-auto py-4 px-4">
        <div className="flex flex-col space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="bg-gradient-to-br from-indigo-500 to-purple-600 p-3 rounded-2xl shadow-md transform hover:scale-105 transition-transform duration-200">
                <MessageCircle className="w-6 h-6 text-white" />
              </div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-indigo-400 to-purple-400 bg-clip-text text-transparent">
                Weaver
              </h1>
            </div>
            <div className="flex items-center space-x-4">
              <button
                onClick={toggleDarkMode}
                className={`p-2 rounded-lg ${
                  darkMode
                    ? "text-gray-400 hover:text-gray-200"
                    : "text-gray-600 hover:text-gray-800"
                } transition-colors`}
              >
                {darkMode ? (
                  <Sun className="w-5 h-5" />
                ) : (
                  <Moon className="w-5 h-5" />
                )}
              </button>
              <ConnectionStatus isConnected={isConnected} darkMode={darkMode} />
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <SearchBar
              darkMode={darkMode}
              searchTerm={searchTerm}
              handleSearch={handleSearch}
              isSearchFocused={isSearchFocused}
              setIsSearchFocused={setIsSearchFocused}
            />
            <SortButton
              darkMode={darkMode}
              sortOrder={sortOrder}
              toggleSortOrder={toggleSortOrder}
            />
          </div>
        </div>
      </div>
    </header>
  );
};

================
File: frontend/src/components/LoadingScreen.tsx
================
import { Loader } from "lucide-react";

export const LoadingScreen = ({ darkMode }: { darkMode: boolean }) => {
  return (
    <div className={`min-h-screen ${
      darkMode ? "bg-gray-900" : "bg-gradient-to-br from-indigo-50 to-purple-50"
    } flex items-center justify-center`}>
      <div className={`flex flex-col items-center space-y-4 ${
        darkMode ? "bg-gray-800" : "bg-white/80"
      } backdrop-blur-sm p-8 rounded-2xl shadow-lg`}>
        <div className="relative">
          <Loader className="w-10 h-10 text-indigo-600 animate-spin" />
          <div className="absolute inset-0 animate-pulse-ring rounded-full border-4 border-indigo-600/30" />
        </div>
        <p className={`${darkMode ? "text-gray-200" : "text-indigo-900"} font-medium text-lg`}>
          Loading messages...
        </p>
      </div>
    </div>
  );
};

================
File: frontend/src/components/Message.tsx
================
import { TextData } from "../types/types";
import CopyButton from "./CopyButton";
import { MessageContent } from "./MessageContent";
import { MessageHeader } from "./MessageHeader";

export const Message = ({
  text,
  darkMode,
  isExpanded,
  isSelected,
  onClick,
}: {
  text: TextData;
  darkMode: boolean;
  isExpanded: boolean;
  isSelected: boolean;
  onClick: (e: React.MouseEvent, id: number) => void;
}) => (
  <div
    className={`${
      darkMode
        ? "bg-gray-800/90 border-gray-700 hover:bg-gray-750"
        : "bg-white/80 border-indigo-100 hover:bg-white/90 hover:border-indigo-200"
    } backdrop-blur-sm rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md ${
      isSelected ? "ring-2 ring-indigo-500" : ""
    }`}
    onClick={(e) => onClick(e, text.id)}
  >
    <div
      className={`p-4 flex items-center justify-between cursor-pointer ${
        isExpanded ? "pb-2" : ""
      }`}
    >
      <MessageHeader text={text} darkMode={darkMode} />
      <div className="flex items-center space-x-2 flex-shrink-0">
        <CopyButton text={text.content} darkMode={darkMode} />
      </div>
    </div>
    {isExpanded && <MessageContent text={text} darkMode={darkMode} />}
  </div>
);

================
File: frontend/src/components/MessageContent.tsx
================
import { TextData } from "../types/types";
import { formatContent } from "../utils/formatters";

export const MessageContent = ({
  text,
  darkMode,
}: {
  text: TextData;
  darkMode: boolean;
}) => (
  <div
    className={`border-t ${
      darkMode ? "border-gray-700" : "border-indigo-100"
    } animate-fade-in message-content`}
  >
    <div
      className={`max-h-screen overflow-y-auto p-6 ${
        darkMode ? "text-gray-300" : "text-gray-800"
      } font-medium leading-relaxed`}
      onClick={(e) => e.stopPropagation()}
    >
      {formatContent(text.content)}
    </div>
  </div>
);

================
File: frontend/src/components/MessageHeader.tsx
================
import { TextData } from "../types/types";
import { formatDate } from "../utils/formatters";

export const MessageHeader = ({
  text,
  darkMode,
}: {
  text: TextData;
  darkMode: boolean;
}) => (
  <div className="flex items-center space-x-4 min-w-0">
    <div className="flex flex-col items-start space-y-1">
      <span className="px-3 py-1 bg-gradient-to-r from-indigo-500 to-purple-500 text-white text-xs font-medium rounded-full shadow-sm">
        #{text.id}
      </span>
      <span
        className={`${
          darkMode ? "text-indigo-400/70" : "text-indigo-600/70"
        } text-sm font-medium`}
      >
        {formatDate(text.created_at)}
      </span>
    </div>
    <p
      className={`${
        darkMode ? "text-gray-300" : "text-gray-700"
      } truncate font-medium flex-1`}
    >
      {text.content.split("\\n")[0].substring(0, 100)}
    </p>
  </div>
);

================
File: frontend/src/components/MessageList.tsx
================
import { ExpandedState, TextData } from "../types/types";
import { EmptyState } from "./EmptyState";
import { ErrorMessage } from "./ErrorMessage";
import { Message } from "./Message";

export const MessageList = ({
  darkMode,
  error,
  filteredTexts,
  expandedStates,
  selectedMessage,
  handleMessageClick,
  searchTerm
}: {
  darkMode: boolean;
  error: string;
  filteredTexts: TextData[];
  expandedStates: ExpandedState;
  selectedMessage: number | null;
  handleMessageClick: (e: React.MouseEvent, id: number) => void;
  searchTerm: string;
}) => (
  <main className="max-w-6xl mx-auto py-6 px-4">
    {error && <ErrorMessage error={error} darkMode={darkMode} />}
    <div className="space-y-4">
      {filteredTexts.length > 0 ? (
        filteredTexts.map((text) => (
          <Message
            key={text.id}
            text={text}
            darkMode={darkMode}
            isExpanded={expandedStates[text.id]}
            isSelected={selectedMessage === text.id}
            onClick={handleMessageClick}
          />
        ))
      ) : (
        <EmptyState darkMode={darkMode} searchTerm={searchTerm} />
      )}
    </div>
  </main>
);

================
File: frontend/src/components/SearchBar.tsx
================
import { Search, X } from "lucide-react";

export const SearchBar = ({
  darkMode,
  searchTerm,
  handleSearch,
  isSearchFocused,
  setIsSearchFocused
}: {
  darkMode: boolean;
  searchTerm: string;
  handleSearch: (value: string) => void;
  isSearchFocused: boolean;
  setIsSearchFocused: (value: boolean) => void;
}) => (
  <div className={`relative flex-1 transition-all duration-200 ${isSearchFocused ? "flex-grow" : ""}`}>
    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <Search className={`w-5 h-5 ${darkMode ? "text-gray-500" : "text-gray-400"}`} />
    </div>
    <input
      type="text"
      placeholder="Search messages..."
      value={searchTerm}
      onChange={(e) => handleSearch(e.target.value)}
      onFocus={() => setIsSearchFocused(true)}
      onBlur={() => setIsSearchFocused(false)}
      className={`w-full pl-10 pr-4 py-2 ${
        darkMode
          ? "bg-gray-700 text-gray-200 border-gray-600 focus:border-indigo-500 focus:ring-indigo-500/20"
          : "bg-white text-gray-900 border-indigo-100 focus:border-indigo-300 focus:ring-indigo-200"
      } rounded-xl border focus:ring-2 focus:outline-none transition-all duration-200`}
    />
    {searchTerm && (
      <button
        onClick={() => handleSearch("")}
        className={`absolute inset-y-0 right-0 pr-3 flex items-center ${
          darkMode ? "text-gray-400 hover:text-gray-300" : "text-gray-400 hover:text-gray-600"
        }`}
      >
        <X className="w-5 h-5" />
      </button>
    )}
  </div>
);

================
File: frontend/src/components/SortButton.tsx
================
import { Filter } from "lucide-react";

export const SortButton = ({
  darkMode,
  sortOrder,
  toggleSortOrder,
}: {
  darkMode: boolean;
  sortOrder: "newest" | "oldest";
  toggleSortOrder: () => void;
}) => (
  <button
    onClick={toggleSortOrder}
    className={`flex items-center space-x-2 px-4 py-2 ${
      darkMode
        ? "bg-gray-700 text-indigo-400 border-gray-600 hover:bg-gray-600"
        : "bg-white text-indigo-600 border-indigo-100 hover:border-indigo-300 hover:bg-indigo-50"
    } rounded-xl border transition-all duration-200`}
  >
    <Filter className="w-5 h-5" />
    <span className="text-sm font-medium">
      {sortOrder === "newest" ? "Newest First" : "Oldest First"}
    </span>
  </button>
);

================
File: frontend/src/types/types.ts
================
export interface TextData {
  id: number;
  content: string;
  created_at: string;
}

export interface ExpandedState {
  [key: number]: boolean;
}

================
File: frontend/src/utils/formatters.tsx
================
export const formatContent = (content: string) => {
  return content.split("\\n").map((text, index, array) => (
    <span key={index} className="whitespace-pre-wrap">
      {text}
      {index < array.length - 1 && <br />}
    </span>
  ));
};

export const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  const now = new Date();
  const diff = now.getTime() - date.getTime();
  const seconds = Math.floor(diff / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);

  if (days > 7) {
    return date.toLocaleDateString(undefined, {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  } else if (days > 0) {
    return `${days}d ago`;
  } else if (hours > 0) {
    return `${hours}h ago`;
  } else if (minutes > 0) {
    return `${minutes}m ago`;
  } else {
    return "Just now";
  }
};

================
File: frontend/src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: frontend/src/App.test.tsx
================
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: frontend/src/App.tsx
================
import { useState, useEffect, useCallback } from "react";
import { io } from "socket.io-client";
import { Loader } from "lucide-react";
import { Header } from "./components/Header";
import { MessageList } from "./components/MessageList";
import { Footer } from "./components/Footer";

interface TextData {
  id: number;
  content: string;
  created_at: string;
}

interface ExpandedState {
  [key: number]: boolean;
}

export default function App() {
  const [texts, setTexts] = useState<TextData[]>([]);
  const [filteredTexts, setFilteredTexts] = useState<TextData[]>([]);
  const [error, setError] = useState<string>("");
  const [isLoading, setIsLoading] = useState(true);
  const [isConnected, setIsConnected] = useState(false);
  const [expandedStates, setExpandedStates] = useState<ExpandedState>({});
  const [searchTerm, setSearchTerm] = useState("");
  const [sortOrder, setSortOrder] = useState<"newest" | "oldest">("newest");
  const [darkMode, setDarkMode] = useState(false);
  const [selectedMessage, setSelectedMessage] = useState<number | null>(null);

  const handleMessageClick = (e: React.MouseEvent, id: number) => {
    if (!(e.target as HTMLElement).closest(".message-content")) {
      toggleExpand(id);
      setSelectedMessage(id);
    }
  };

  const toggleExpand = (id: number) => {
    setExpandedStates((prev) => ({ ...prev, [id]: !prev[id] }));
  };

  const handleSearch = useCallback(
    (value: string) => {
      setSearchTerm(value);
      const filtered = texts.filter(
        (text) =>
          text.content.toLowerCase().includes(value.toLowerCase()) ||
          text.id.toString().includes(value)
      );
      setFilteredTexts(filtered);
    },
    [texts]
  );

  const toggleSortOrder = () => {
    setSortOrder((prev) => (prev === "newest" ? "oldest" : "newest"));
  };

  const sortTexts = (textsToSort: TextData[]) => {
    return [...textsToSort].sort((a, b) => {
      const comparison =
        new Date(b.created_at).getTime() - new Date(a.created_at).getTime();
      return sortOrder === "newest" ? comparison : -comparison;
    });
  };

  useEffect(() => {
    setIsLoading(true);

    fetch("http://localhost:4000/api/texts")
      .then((response) => response.json())
      .then((data) => {
        const textsData = Array.isArray(data) ? data : data.texts;
        if (Array.isArray(textsData)) {
          setTexts(textsData);
          setFilteredTexts(textsData);
        } else {
          throw new Error("Invalid data format received from API");
        }
      })
      .catch((error) => {
        console.error("Error fetching texts:", error);
        setError(error.message);
      })
      .finally(() => {
        setIsLoading(false);
      });

    const socket = io("http://localhost:4000");

    socket.on("connect", () => {
      setIsConnected(true);
      setError("");
    });

    socket.on("connect_error", (error) => {
      setIsConnected(false);
      setError("Failed to connect to real-time updates");
    });

    socket.on("newText", (newText: TextData) => {
      setTexts((prevTexts) => {
        const updatedTexts = Array.isArray(prevTexts)
          ? [newText, ...prevTexts]
          : [newText];
        return updatedTexts;
      });
    });

    return () => {
      socket.disconnect();
    };
  }, []);

  useEffect(() => {
    setFilteredTexts(sortTexts(searchTerm ? filteredTexts : texts));
    // eslint-disable-next-line
  }, [sortOrder, texts, searchTerm]);

  if (isLoading) {
    return (
      <div
        className={`min-h-screen ${
          darkMode
            ? "bg-gray-900"
            : "bg-gradient-to-br from-indigo-50 to-purple-50"
        } flex items-center justify-center`}
      >
        <div
          className={`flex flex-col items-center space-y-4 ${
            darkMode ? "bg-gray-800" : "bg-white/80"
          } backdrop-blur-sm p-8 rounded-2xl shadow-lg`}
        >
          <div className="relative">
            <Loader className="w-10 h-10 text-indigo-600 animate-spin" />
            <div className="absolute inset-0 animate-pulse-ring rounded-full border-4 border-indigo-600/30" />
          </div>
          <p
            className={`${
              darkMode ? "text-gray-200" : "text-indigo-900"
            } font-medium text-lg`}
          >
            Loading messages...
          </p>
        </div>
      </div>
    );
  }
  return (
    <div
      className={`min-h-screen transition-colors duration-300 ${
        darkMode
          ? "bg-gray-900"
          : "bg-gradient-to-br from-indigo-50 to-purple-50"
      }`}
    >
      <Header
        darkMode={darkMode}
        isConnected={isConnected}
        toggleDarkMode={() => setDarkMode(!darkMode)}
        searchTerm={searchTerm}
        handleSearch={handleSearch}
        sortOrder={sortOrder}
        toggleSortOrder={toggleSortOrder}
      />
      <MessageList
        darkMode={darkMode}
        error={error}
        filteredTexts={filteredTexts}
        expandedStates={expandedStates}
        selectedMessage={selectedMessage}
        handleMessageClick={handleMessageClick}
        searchTerm={searchTerm}
      />
      <Footer darkMode={darkMode} />
    </div>
  );
}

================
File: frontend/src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: frontend/src/index.tsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: frontend/src/react-app-env.d.ts
================
/// <reference types="react-scripts" />

================
File: frontend/src/reportWebVitals.ts
================
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: frontend/src/setupTests.ts
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: frontend/.dockerignore
================
node_modules
build
.git
.gitignore
README.md
.env
*.log

================
File: frontend/.env
================
REACT_APP_API_URL=http://localhost:4000
PORT=3010
WATCHPACK_POLLING=true 
CHOKIDAR_USEPOLLING=true

================
File: frontend/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: frontend/Dockerfile
================
FROM node:18-alpine as development

WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .

ENV PORT=3010 
EXPOSE 3010
CMD ["npm", "start"]

FROM node:18-alpine as production
WORKDIR /app
COPY package*.json ./
RUN npm install --production
COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=production /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

================
File: frontend/nodemon.json
================
{
  "watch": ["src/"],
  "ext": ".ts,.js,.tsx,.jsx",
  "ignore": ["node_modules"],
  "exec": "ts-node ./src/index.ts"
}

================
File: frontend/package.json
================
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@heroicons/react": "^2.1.5",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.119",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "lucide-react": "^0.456.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-scripts": "5.0.1",
    "socket.io-client": "^4.8.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "nodemon": "^3.1.7",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14"
  }
}

================
File: frontend/postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: frontend/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: frontend/tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}

================
File: docker-compose.yml
================
services:
  frontend:
    build:
      context: ./frontend
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:4000
      - PORT=3000
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    command: npm run start
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      target: development
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=weaver
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    command: npm run dev
    depends_on:
      - postgres

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=weaver
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql

volumes:
  postgres_data:

================
File: install.sh
================
#!/bin/bash

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Installing Weaver CLI...${NC}"

# Determine install directory
INSTALL_DIR="$HOME/.weaver"
BIN_DIR="/usr/local/bin"

# Create installation directory
mkdir -p "$INSTALL_DIR"

# Function to handle installation from local or remote source
install_from_source() {
    local is_local=$1
    
    if [ "$is_local" = true ] && [ -f "cli/weaver.sh" ]; then
        echo -e "${BLUE}Installing from local source...${NC}"
        cp "cli/weaver.sh" "$INSTALL_DIR/weaver.sh"
    else
        echo -e "${BLUE}Downloading CLI scripts from GitHub...${NC}"
        curl -sSL "https://raw.githubusercontent.com/yourusername/weaver/main/cli/weaver.sh" -o "$INSTALL_DIR/weaver.sh"
        curl -sSL "https://raw.githubusercontent.com/yourusername/weaver/main/cli/setup.sh" -o "$INSTALL_DIR/setup.sh"
    fi
}

# Check if we're installing from local files or remote
if [ -f "cli/weaver.sh" ]; then
    install_from_source true
else
    install_from_source false
fi

# Make scripts executable
chmod +x "$INSTALL_DIR/weaver.sh"

# Create symbolic link
echo -e "${BLUE}Creating symbolic link...${NC}"
if [ -w "$BIN_DIR" ]; then
    ln -sf "$INSTALL_DIR/weaver.sh" "$BIN_DIR/weaver"
else
    sudo ln -sf "$INSTALL_DIR/weaver.sh" "$BIN_DIR/weaver"
fi

# Verify installation
if command -v weaver >/dev/null 2>&1; then
    echo -e "${GREEN}Weaver CLI has been successfully installed!${NC}"
    echo -e "Run ${BLUE}weaver -h${NC} to see available commands"
else
    echo -e "${RED}Installation failed. Please try manual installation method.${NC}"
    exit 1
fi

# Add to PATH if needed
if [[ ":$PATH:" != *":$BIN_DIR:"* ]]; then
    echo -e "${BLUE}Adding $BIN_DIR to PATH...${NC}"
    shell_file="$HOME/.bashrc"
    # Check for ZSH
    if [ -f "$HOME/.zshrc" ]; then
        shell_file="$HOME/.zshrc"
    fi
    echo "export PATH=\$PATH:$BIN_DIR" >> "$shell_file"
    echo -e "${GREEN}Please restart your terminal or run: source $shell_file${NC}"
fi

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Spencer Jireh Cebrian

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: Makefile
================
# Makefile
.PHONY: help build up down logs clean cli-setup test install migrate dev prod db-reset db-init local-dev local-install local-stop

# Colors for terminal output
CYAN=\033[0;36m
NC=\033[0m # No Color

# Default target
help:
	@echo "$(CYAN)Available commands:$(NC)"
	@echo "Development:"
	@echo "  make local-install  - Install dependencies for local development"
	@echo "  make local-dev      - Run frontend and backend locally with Docker PostgreSQL"
	@echo "  make local-stop     - Stop local development servers"
	@echo "  make install        - Install dependencies for all services"
	@echo "  make dev           - Start all services in Docker development mode"
	@echo "  make build         - Build all Docker images"
	@echo "  make up            - Start all services in production mode"
	@echo "  make down          - Stop all services"
	@echo "  make restart       - Restart all services"
	@echo ""
	@echo "CLI:"
	@echo "  make install-cli   - Install the Weaver CLI tool globally"
	@echo ""
	@echo "Database:"
	@echo "  make migrate       - Run database migrations"
	@echo ""
	@echo "Utilities:"
	@echo "  make logs          - View logs from all services"
	@echo "  make clean         - Remove all containers and images"
	@echo "  make test          - Run tests for all services"

# Local development setup
local-install:
	@echo "$(CYAN)Installing frontend dependencies...$(NC)"
	cd frontend && npm install
	@echo "$(CYAN)Installing backend dependencies...$(NC)"
	cd backend && npm install
	@echo "$(CYAN)Starting PostgreSQL container...$(NC)"
	docker-compose up -d postgres
	@echo "$(CYAN)Waiting for PostgreSQL to start...$(NC)"
	sleep 5
	@echo "$(CYAN)Running database initialization...$(NC)"
	docker-compose exec postgres psql -U postgres -d weaver -f /docker-entrypoint-initdb.d/init.sql

# Run frontend and backend locally
local-dev:
	@echo "$(CYAN)Starting PostgreSQL if not running...$(NC)"
	docker-compose up -d postgres
	@echo "$(CYAN)Starting backend in the background...$(NC)"
	cd backend && PORT=4000 DB_HOST=localhost npm run dev & echo $$! > backend.pid
	@echo "$(CYAN)Starting frontend in the background...$(NC)"
	cd frontend && PORT=3010 npm start & echo $$! > frontend.pid
	@echo "$(CYAN)Local development servers are running:$(NC)"
	@echo "Frontend: http://localhost:3010"
	@echo "Backend:  http://localhost:4000"
	@echo "To stop the servers, run: make local-stop"

# Stop local development servers
# Enhanced stop command
local-stop:
	@echo "$(CYAN)Stopping local development servers...$(NC)"
	-@pkill -f "node.*frontend" || true
	-@pkill -f "node.*backend" || true
	-@lsof -ti :3010 | xargs kill -9 || true
	-@lsof -ti :4000 | xargs kill -9 || true
	-@rm -f frontend/frontend.pid backend/backend.pid
	@echo "$(CYAN)Stopping PostgreSQL container...$(NC)"
	docker-compose stop postgres
	@echo "$(CYAN)Cleanup complete$(NC)"

# Optional command to show running processes
local-ps:
	@echo "$(CYAN)Checking running processes...$(NC)"
	@echo "Frontend (port 3010):"
	@lsof -i :3010 || echo "No process using port 3010"
	@echo "\nBackend (port 4000):"
	@lsof -i :4000 || echo "No process using port 4000"
	@echo "\nNode processes:"
	@ps aux | grep node | grep -v grep || echo "No node processes found"

# Install CLI
install-cli:
	@echo "$(CYAN)Installing Weaver CLI...$(NC)"
	@./install.sh

# Install dependencies
install:
	@echo "$(CYAN)Installing frontend dependencies...$(NC)"
	cd frontend && npm install
	@echo "$(CYAN)Installing backend dependencies...$(NC)"
	cd backend && npm install

# Development mode (all in Docker)
dev:
	@echo "$(CYAN)Starting services in development mode...$(NC)"
	docker-compose -f docker-compose.yml up --build

# Build all Docker images
build:
	@echo "$(CYAN)Building Docker images...$(NC)"
	docker-compose build

# Start all services in production mode
up:
	@echo "$(CYAN)Starting services in production mode...$(NC)"
	docker-compose up -d

# Stop all services
down:
	@echo "$(CYAN)Stopping all services...$(NC)"
	docker-compose down

# Restart all services
restart: down up
	@echo "$(CYAN)Services restarted$(NC)"

# View logs from all services
logs:
	@echo "$(CYAN)Showing logs...$(NC)"
	docker-compose logs -f

# Clean up
clean:
	@echo "$(CYAN)Cleaning up Docker resources...$(NC)"
	docker-compose down --rmi all --volumes --remove-orphans
	rm -rf frontend/node_modules
	rm -rf backend/node_modules

# Run database migrations
migrate:
	@echo "$(CYAN)Running database migrations...$(NC)"
	docker-compose exec backend npm run migrate

# Install the CLI tool
cli-setup:
	@echo "$(CYAN)Setting up CLI...$(NC)"
	@bash cli/setup.sh

# Run tests for all services
test:
	@echo "$(CYAN)Running frontend tests...$(NC)"
	cd frontend && npm test
	@echo "$(CYAN)Running backend tests...$(NC)"
	cd backend && npm test

================
File: README.md
================
# Weaver 🕸️

A modern, real-time code collection and collaboration tool that helps developers gather, and share code snippets, directories and repositories across their development environment. Meant to be used for feeding your context and code to LLMs for better results.

> ⚠️ **Development Status**: This project is in early development and is not yet stable. APIs and features may change significantly between versions. Use at your own risk.

## ✨ Features

- **Real-time Sync** - Instantly collect and synchronize code across your development environment
- **Modern Interface** - Clean, responsive design with dark/light mode support
- **Powerful Search** - Quickly find code snippets with full-text search
- **CLI Tool** - Seamlessly collect code from your terminal
- **Live Updates** - Real-time WebSocket updates for collaborative workflows
- **Code Organization** - Automatic language detection and syntax highlighting
- **Quick Copy** - One-click code copying with visual feedback
- **Docker Ready** - Easy deployment with Docker Compose

## 🚀 Quick Start

1. Clone the repository:

```bash
git clone https://github.com/yourusername/weaver
cd weaver
```

2. Start the application:

```bash
make dev
```

3. Access the interfaces:

- Web UI: http://localhost:3010
- API: http://localhost:4000

## 🛠️ CLI Installation

### One-Line Install (Linux/macOS)

```bash
curl -sSL https://github.com/spencerjirehcebrian/weaver/main/install.sh | bash
```

### Manual Install

```bash
./install.sh
# or
make install-cli
```

### CLI Usage

```bash
# Collect code from current directory
weaver

# Specify target directory
weaver -d /path/to/project

# Filter specific extensions
weaver -e js,py,go

# Exclude patterns
weaver -x "*.test.js,*.min.js"

# Show help
weaver -h
```

## 🏗️ Development Setup

### Prerequisites

- Docker & Docker Compose
- Node.js 18+
- PostgreSQL 14+

### Environment Setup

1. **Start Services**

```bash
# Development mode
make dev

# Production mode
make up
```

2. **Install Dependencies**

```bash
make install
```

3. **Database Setup**

```bash
make db-init
```

### Available Commands

```bash
make dev          # Start development environment
make up          # Start production environment
make down        # Stop all services
make install     # Install dependencies
make install-cli # Install CLI tool
make test        # Run tests
make clean       # Clean environment
make logs        # View logs
```

## 📁 Project Structure

```
weaver/
├── backend/                # Node.js/Express backend
│   ├── src/               # Backend source code
│   ├── db/                # Database migrations & schemas
│   └── Dockerfile
├── frontend/              # React frontend
│   ├── src/
│   │   ├── components/    # React components
│   │   └── App.tsx       # Main application
│   └── Dockerfile
├── cli/                   # CLI tool
│   └── weaver.sh         # CLI implementation
├── docker-compose.yml     # Docker services config
├── install.sh            # CLI installer
└── Makefile              # Build automation
```

## 🔧 Configuration

### Environment Variables

**Backend**

```env
NODE_ENV=development
PORT=4000
DB_HOST=postgres
DB_PORT=5432
DB_NAME=weaver
DB_USER=postgres
DB_PASSWORD=postgres
```

**Frontend**

```env
PORT=3010
REACT_APP_API_URL=http://localhost:4000
```

## 🤝 Contributing

1. Fork the repository
2. Create your feature branch: `git checkout -b feature/amazing-feature`
3. Commit your changes: `git commit -m 'Add amazing feature'`
4. Push to the branch: `git push origin feature/amazing-feature`
5. Open a Pull Request

## 📝 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## ✨ Credits

Created and maintained by Spencer Jireh Cebrian

---

<div align="center">
  <strong>Like this project? Give it a ⭐️!</strong>
</div>
